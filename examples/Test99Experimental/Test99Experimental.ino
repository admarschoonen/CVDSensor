#include <TouchLib.h>

/*
 * Code generated by TouchLib SemiAutoTuning.
 *
 * Hardware configuration:
 *   sensor 0: type: capacitive (CVD method), analog pin A0
 *   sensor 1: type: capacitive (CVD method), analog pin A1
 *   sensor 2: type: resistive (analogRead() method),  analog pin A0, ground
 *   pin: 2
 */

/*
 *  Number of sensors. For capacitive sensors: needs to be a minimum of 2. When
 * using only one sensor, set N_SENSORS to 2 and use an unused analog input pin
 * for the second
 * sensor. For 2 or more sensors you don't need to add an unused analog input.
 */
#define N_SENSORS                       3

/*
 * Number of measurements per sensor to take in one cycle. More measurements
 * means more noise reduction / spreading, but is also slower.
 */
#define N_MEASUREMENTS_PER_SENSOR       16

#define N_OBJECTS			2

/* tlSensors is the actual object that contains all the sensors */
TLSensors<N_SENSORS, N_MEASUREMENTS_PER_SENSOR, N_OBJECTS> tlSensors;

void setup()
{
        Serial.begin(9600);

        while(!Serial); /* Required for ATmega32u4 processors */

        /* Delay to make sure serial monitor receives first message */
        delay(500);
        Serial.println();
        Serial.println();
        Serial.println("Switching baudrate to 115200. Make sure to adjust baudrate in serial monitor as well!");
        Serial.println();
        Serial.println();
        Serial.end();

        /*
         * Switch baudrate to highest baudrate available. With higher baudrate,
         * CPU has more time left to do capacitive sensing and thus get better
         * signal quality.
         */
        Serial.begin(115200);
        delay(500);
        Serial.println();
        Serial.println();

        /*
         * Configuration for sensor 0:
         * Type: capacitive (CVD method)
         * Analog pin: A0
         */
        tlSensors.initialize(0, TLSampleMethodCVD);
        tlSensors.data[0].tlStructSampleMethod.CVD.pin =               A0;
        tlSensors.data[0].releasedToApproachedThreshold =              37.78;
        tlSensors.data[0].approachedToReleasedThreshold =              34.00;
        tlSensors.data[0].approachedToPressedThreshold =               142.32;
        tlSensors.data[0].pressedToApproachedThreshold =               128.08;
        tlSensors.data[0].calibratedMaxDelta =                         1332.53;
        tlSensors.data[0].enableSlewrateLimiter =                      false;

        /*
         * Configuration for sensor 1:
         * Type: capacitive (CVD method)
         * Analog pin: A1
         */
        tlSensors.initialize(1, TLSampleMethodCVD);
        tlSensors.data[1].tlStructSampleMethod.CVD.pin =               A1;
        tlSensors.data[1].releasedToApproachedThreshold =              5.00;
        tlSensors.data[1].approachedToReleasedThreshold =              4.00;
        tlSensors.data[1].approachedToPressedThreshold =               2350.41;
        tlSensors.data[1].pressedToApproachedThreshold =               2115.37;
        tlSensors.data[1].calibratedMaxDelta =                         4790.89;
        tlSensors.data[1].enableSlewrateLimiter =                      false;

        /*
         * Configuration for sensor 2:
         * Type: resistive (analogRead() method)
         * Analog pin: A0
         * Ground pin: 2
         */
        tlSensors.initialize(2, TLSampleMethodResistive);
        tlSensors.data[2].tlStructSampleMethod.resistive.pin =         A0;
        tlSensors.data[2].tlStructSampleMethod.resistive.gndPin =      2;
        tlSensors.data[2].releasedToApproachedThreshold =              0.50;
        tlSensors.data[2].approachedToReleasedThreshold =              0.25;
        tlSensors.data[2].approachedToPressedThreshold =               0.91;
        tlSensors.data[2].pressedToApproachedThreshold =               0.82;
        tlSensors.data[2].calibratedMaxDelta =                         12.99;
        tlSensors.data[2].enableSlewrateLimiter =                      false;

        if (tlSensors.error) {
                Serial.println("Error detected during initialization of TouchLib. This is "
                       "probably a bug; please notify the author.");
                while (1);
        }

        Serial.println("Calibrating sensors...");
        while(tlSensors.anyButtonIsCalibrating()) {
                tlSensors.sample();
        }
        Serial.println("Calibration done...");
}

void print_sensor_state(int n)
{
        char s[32] = {'\0'};

        Serial.print(" #");
        Serial.print(n);
        Serial.print(": ");
        Serial.print(tlSensors.isCalibrating(n));
        Serial.print(" ");
        Serial.print(tlSensors.isReleased(n));
        Serial.print(" ");
        Serial.print(tlSensors.isApproached(n));
        Serial.print(" ");
        Serial.print(tlSensors.isPressed(n));
        Serial.print(" ");
        Serial.print(tlSensors.getState(n));
        Serial.print(" ");
        Serial.print(tlSensors.getStateLabel(n));
        memset(s, '\0', sizeof(s));
        memset(s, ' ', 22 - strlen(tlSensors.getStateLabel(n)));
        Serial.print(s);
}

#define BAR_LENGTH                     58 /* <-- Change this to print longer or
shorter visualizations */

void loop(void)
{
        int k;

        int n = 0; /* <-- Change this number to view a different sensor */

        tlSensors.sample(); /* <-- Take a series of new samples for all sensors
*/

        tlSensors.printBar(n, BAR_LENGTH); /* <-- Print the visualization */

        print_sensor_state(n); /* <-- Print summary of sensor n */

        /* For capacitive + resistive sensors: k is the sensor that sensor n is
 * paired with */
        k = tlSensors.findSensorPair(n, (n + 1) % N_SENSORS);
        if (k > -1) {
                print_sensor_state(k); /* <-- Print summary of sensor k */
        }
        Serial.println("");
}
